#!/usr/bin/env python
"""generate all release note files in docs/versions/ from GitHub release notes API
"""

from datetime import datetime
import itertools
import logging
import pathlib
import re

import jinja2
import requests


_logger = logging.getLogger(__name__)


repo_owner = "HGVSNomenclature"
repo_name = "hgvs-nomenclature"
out_dir = pathlib.Path("docs/releases")
out_dir.mkdir(parents=True, exist_ok=True)


def fetch_github_releases(repo_owner, repo_name):
    # return list of releases with x.y.z semver tags

    semver_pattern = re.compile(r"^v?(\d+)\.(\d+)\.(\d+)$")
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/releases"
    response = requests.get(url)
    response.raise_for_status()
    releases = []
    for r in response.json():
        m = semver_pattern.match(r["tag_name"])
        if m:
            version_t = tuple(map(int, r["tag_name"].split(".")))
            releases.append({
                "body": r["body"],
                "published_at": datetime.fromisoformat(r["published_at"].rstrip("Z")),
                "version_t": version_t,
                "version_xy": ".".join(r["tag_name"].split(".")[:2]),
                "version": r["tag_name"],
            })
    return releases


def group_releases_by_major_minor(releases):
    sorted_releases = sorted(releases, key=lambda r: r["version_t"])
    grouped_releases_i = itertools.groupby(sorted_releases, key=lambda r: r["version_xy"])
    return {tag: list(releases) for tag, releases in grouped_releases_i}


def create_markdown_files(grouped_releases, output_dir):
    template = get_release_file_template()
    for version_xy, versions in grouped_releases.items():
        page_content = template.render(
            version_xy=version_xy, releases=releases
        )
        out_fn = output_dir / f"{version_xy}.md"
        with out_fn.open("w") as f:
            f.write(page_content)
            _logger.info(f"Wrote {out_fn}")

def get_release_file_template():
    return jinja2.Template(
        """
# Release Notes for {{version_xy}}.z

{% for release in releases %}
## {{ release["version"] }} ({{release["published_at"].date()}})

{{ release["body"] }}

{% endfor %}
    """
    )


if __name__ == "__main__":
    import coloredlogs

    coloredlogs.install(level="INFO")

    releases = fetch_github_releases(repo_owner, repo_name)
    _logger.info(f"Fetched {len(releases)} releases from {repo_owner}/{repo_name}")

    grouped_releases = group_releases_by_major_minor(releases)
    _logger.info(f"Grouped into {len(grouped_releases)} major.minor releases")

    create_markdown_files(grouped_releases, out_dir)
