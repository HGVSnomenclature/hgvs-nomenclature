#!/usr/bin/env python3
"""process entire docs directory to adapt varnomen pages to mkdocs"""

import itertools
import logging
import pathlib
import re
import sys

_ = """
TODO:
- {:#DNAo}
"""

_logger = logging.getLogger()


def process1(content: str) -> str:
    # move title from header to # heading
    m = re.search(r"title:\s+([^\n]+)", content)
    try:
        title = m.group(1)
        content = re.sub(r'# \{\{\s*page.title\s*\}\}', "# " + title, content)
    except AttributeError:
        pass
    
    # simple string replacements
    content = content.replace('{:target="\_blank"}', "")
    content = content.replace('{:target="blank"}', "")
    content = content.replace("{:#version-list}", "")
    content = content.replace("/bg-material/", "/background/")

    # remove header
    content = re.sub(r"^---.+?---\s*", "", content, flags=re.S)
    
    # remove --- lines
    content = re.sub(r"^---\n", "", content, flags=re.MULTILINE)
    
    # `### **...**`` â†’ drop emphasis
    content = re.sub(r"^(#+)\s+\*\*(.+?)\*\*", r"\1 \2", content, flags=re.MULTILINE)

    # remove separators
    content = re.sub(r"^\* \* \*\s*$", "", content, flags=re.MULTILINE)
    
    # standardize case of SVD-WG references (all uppercase), including filenames
    content = re.sub(r"svd-wg(\d+)", r"SVD-WG\1", content)

    # replace FF0000 with bold
    content = re.sub(r'<font color="#FF0000">(.+?)</font>', r"**\1**", content)

    # remove overstyling
    content = re.sub(r"_\*\*(.+?)\*\*_", r"**\1**", content)
    content = re.sub(r"\*\*_(.+?)_\*\*", r"**\1**", content)

    # remove useless <br> on lists
    content = re.sub(r"^(\*.+)<br>\s*$", r"\1", content, flags=re.MULTILINE)

    # table reformatting    
    content = content.replace("{:.table .table-bordered}", "")
    content = re.sub(r"\n\s*\|(\s+\|)+\n", r"\n", content)
    content = content.replace("|:--------------------------------------:|:-------------:|", "|:--------------------------------------|:-------------:|") 

    # remove spaces around list markers, replace tabs with space, remove eol space
    content = re.sub(r"^(\s*\*)\s+", r"\1 ", content, flags=re.MULTILINE)
    content = re.sub(r"\t", r"    ", content, flags=re.MULTILINE)
    content = re.sub(r"\s+$", r"", content)

    # image paths refer to the baseurl, which is no longer needed   
    content = content.replace("{{site.baseurl}}", "")
    content = content.replace("{:.img-responsive .center-block #refSeqFig}", "")
 
    # pull definitions up with preceeding line
    content = re.sub(r"\n\s+:\s+", r": ", content)
 
    # remove extraneous newlines
    content = re.sub(r"\n\n+", r"\n\n", content)
 
    # convert jekyll's {:tag} to an html anchor
    content = re.sub(r"{:#(\w+)}", r'<a name="\1"/>', content)
    
    return content


def process_hvnc(content: str) -> str:
    content = re.sub(r"### (Call for members)\n\n(.+?)\n\n", r'!!! note "\1"\n\n    \2\n\n', content)
    return content

def process_recommendation(path) -> str:
    def rewrite_discussion(d):
        v = re.sub(r"^\s+([^:]+):\s*(.+)", r'\n!!! note "\1"\n\n    \2', d.group(1), flags=re.MULTILINE)
        return v
    
    desc_path = path.replace("variant/", "variant/description/").replace(".md", "-desc.md")
    eg_path = path.replace("variant/", "variant/example/").replace(".md", "-eg.md")
    
    _logger.info(f"Recommendation {path} ({desc_path}, {eg_path})")

    content = open(path, "rt").read()
    try:
        desc = open(desc_path).read()
        desc = desc.replace("### Note", "## Notes")
        desc = desc.replace("next\Ter17", "nextTer17")
        desc = "## Description\n\n" + process1(desc)
    except FileNotFoundError:
        desc = ""
    try:
        examples = open(eg_path).read()
        examples = "## Examples\n\n" + process1(examples)
    except FileNotFoundError:
        examples = ""
    desc_eg = desc + "\n" + examples + "\n"

    content = re.sub(r"^(layout|parent):\s.+\n", r"", content, flags=re.MULTILINE)
    content = re.sub(r"^title: (.+)$", r"# \1", content, flags=re.MULTILINE)
    content = re.sub(r"^-.+\n", r"", content, flags=re.MULTILINE)
    content = re.sub(r"definition:.*\n\s+", r"\n## Definition\n\n", content)
    content = re.sub(r"discussion:.*\n", r"\n## Discussion\n", content)
    content = re.sub(r"(?=## Discussion\n)", desc_eg, content)
    content = re.sub(r"(?<=## Discussion\n)(.+)", rewrite_discussion, content, flags=re.S)
    
    return content

def process_bugs(content: str) -> str:
    content = content.replace("Fig.1D]((http:", "Fig.1D](http:")
    return content

if __name__ == "__main__":
    
    logging.basicConfig(level=logging.INFO)

    here = pathlib.Path()
    paths = itertools.chain.from_iterable(here.glob(rp) for rp in sys.argv[1:])
    for path in paths:
        path_str = str(path)
        if re.search("variant/(description|example)/", path_str):
            _logger.debug(f"Skipping {path}")
            continue         
        if re.search("variant/[^/]+.md", path_str):
            content = process_recommendation(path_str)
        else:
            content = open(path, "rt").read()
            content = process1(content)
            if path_str.endswith("/HVNC.md"):
                content = process_hvnc(content)
            content = process_bugs(content)
        open(path, "wt").write(content)

