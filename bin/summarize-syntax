#!/usr/bin/env python3
"""summarize HGVS syntax as HTML table with cols for molecule types and rows for variant types"""

import argparse
import logging

import jinja2
import markdown
import yaml

_logger = logging.getLogger()

table_template = """
<table class="syntax">
<thead>
<th>variant type</th>
<th>DNA</th>
<th>RNA</th>
<th>AA</th>
</thead>
<tbody>
  {% for vt, vtb in syntax_data.items() %}
  <tr>
    <th>{{vt}}</th>
    {% for vmb in (vtb.get("dna"),vtb.get("rna"),vtb.get("aa")) %}
    {% if vmb %}
    <td>
      {% for sdata in vmb %}
      <code>{{sdata["syntax"]}}</code>
      <ul>{% for ex in sdata["examples"] %}<li><code>{{ex}}</code>{% endfor %}</ul>
      {% endfor %}
    </td>
    {% else %}
    <td/>
    {% endif %}
    {% endfor %}
  </tr>
  {% endfor %}
</tbody>
</table>

See [explanation of grammar syntax and common grammar elements](/recommendations/grammar) for elaboration
"""



def parse_args(args = None):
  ap = argparse.ArgumentParser(description=__doc__)
  ap.add_argument("--syntax-file", "-f", required=True)
  opts = ap.parse_args(args=args)
  return opts


if __name__ == "__main__":
  import coloredlogs

  coloredlogs.install(level="INFO")

  md = markdown.Markdown()
  env = jinja2.Environment()
  env.undefined = jinja2.StrictUndefined
  env.filters['markdown'] = lambda text: md.convert(text)
  env.trim_blocks = True
  env.lstrip_blocks = True

  opts = parse_args()

  mt_vt_syntax_data = yaml.safe_load(open(opts.syntax_file))
  molecule_types = list( mt_vt_syntax_data.keys() )
  variant_types = sorted([vt for mt in molecule_types for vt in mt_vt_syntax_data[mt]])
  vt_mt_syntax_data = {vt: {mt: mt_vt_syntax_data[mt].get(vt) for mt in molecule_types}
                       for vt in variant_types }
  print(env.from_string(table_template).render(syntax_data=vt_mt_syntax_data))
