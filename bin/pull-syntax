#!/usr/bin/env python3
"""extract one syntax definition from yaml file, as html table"""

import argparse

import itertools
import jinja2
import jmespath
import markdown
import re
import yaml


table_template = """<table class="syntax">
  {%- for sdata in syntax_data %}
    {% if sdata["name"] %}<tr><th class="section" colspan=2>{{sdata["name"]}}</th></tr>{% endif %}
    <tr><th>Syntax</th> <td><code>{{sdata["syntax"]}}</code></td> </tr>
    {% if sdata["notes"] %}<tr><th></th> <td><ul>{% for n in sdata["notes"] %}<li>{{n|markdown}}</li>{% endfor %}</ul></td></tr>{% endif %}
    <tr class="examples"><th>Examples</th> <td><ul>{% for ex in sdata["examples"] %}<li><code>{{ex}}</code>{% endfor %}</ul></td> </tr>
  {%- endfor %}

  <tr><th class="section" colspan=2>Syntax Explanation</th></tr>
  <tr><td colspan=2 style="padding-left: 30px;"><ul>
    {% for element, description in element_descriptions.items() %}
    <li><code>{{element}}</code>: {{description}}</li>
    {% endfor %}
    </ul>
    See <a href="../../grammar/">explanation of grammar syntax</a> for help understanding this syntax
  </td></tr>
</table>

"""


def parse_args(args = None):
  ap = argparse.ArgumentParser(description=__doc__)
  ap.add_argument("ELEMENT", help="name of block to extract, e.g., dna.deletion")
  ap.add_argument("--syntax-file", "-f", required=True)
  opts = ap.parse_args(args=args)
  return opts

def extract_elements(syntax: str) -> list:
  """extracts unquoted elements in order from syntax string, perhaps with dups"""
  syntax_wo_quoted_elems = re.sub(r'"[^"]+"', "", syntax)
  elements = syntax_wo_quoted_elems.split()
  return elements

if __name__ == "__main__":
  md = markdown.Markdown()
  env = jinja2.Environment()
  env.filters['markdown'] = lambda text: md.convert(text)
  env.trim_blocks = True
  env.lstrip_blocks = True

  opts = parse_args()

  all_syntax_data = yaml.safe_load(open(opts.syntax_file))
  path_ex = jmespath.compile(opts.ELEMENT)
  syntax_data = list(path_ex.search(all_syntax_data))
  if not syntax_data:
    raise RuntimeError(f"{opts.ELEMENT} not defined in {opts.syntax_file}")

  all_elements = sorted(set(itertools.chain.from_iterable(extract_elements(sd["syntax"]) for sd in syntax_data)))
  elements_data = all_syntax_data["elements"]
  element_descriptions = {e: (elements_data[e]["description"] if e in elements_data else "") for e in all_elements}

  print(env.from_string(table_template).render(
    syntax_data=syntax_data, element_descriptions=element_descriptions))
