#!/usr/bin/env python3
"""extract one syntax definition from yaml file, as html table"""

import argparse
import logging
import os
import re
import sys

import jinja2
import jmespath
import markdown
import yaml


_logger = logging.getLogger()

table_template = """<table class="syntax">
  {% for form in forms %}
    {% if form["name"] %}<tr><th class="section" colspan=2>{{form["name"]}}</th></tr>{% endif %}
    <tr><th>Syntax</th> <td><code>{{form["syntax"]}}</code></td> </tr>
    {% if form["notes"] %}<tr><th></th> <td><ul>{% for n in form["notes"] %}<li>{{n|markdown}}</li>{% endfor %}</ul></td></tr>{% endif %}
    <tr class="examples"><th>Examples</th> <td><ul>{% for ex in form["examples"] %}<li><code>{{ex}}</code>{% endfor %}</ul></td> </tr>
  {%- endfor %}

  <tr><th class="section" colspan=2>Explanation of Symbols</th></tr>
  <tr><td colspan=2 style="padding-left: 10px;"><ul>
    {% for element, description in element_descriptions.items() %}
    <li><code>{{element}}</code>: {{description|markdown}}</li>
    {% endfor %}
    </ul>
    See also <a href="../../grammar/">explanation of grammar used in HGVS Nomenclature</a>.
  </td></tr>
</table>

"""


def parse_args(args = None):
  ap = argparse.ArgumentParser(description=__doc__)
  ap.add_argument("VARIANT_TYPE", help="name of block to extract, e.g., dna.del")
  ap.add_argument("--syntax-file", "-f", required=True)
  ap.add_argument("--merge-literals", "-m", action=argparse.BooleanOptionalAction,
                  default=os.getenv("HGVS_MERGE_LITERALS", True))
  ap.add_argument("--warn-missing", "-w", action=argparse.BooleanOptionalAction,
                  default=os.getenv("HGVS_WARN_MISSING", True))
  opts = ap.parse_args(args=args)
  return opts

def extract_elements(syntax: str) -> list:
  """extracts unquoted elements in order from syntax string, perhaps with dups"""
  syntax_wo_quoted_elems = re.sub(r'"[^"]+"', "", syntax)
  elements = syntax_wo_quoted_elems.split()
  return elements

def merge_literals(syntax: str) -> str:
  """merge string literals
  eg "]" ";" "[" → "];["
  """
  return re.sub(r'"\s"', '', syntax)

if __name__ == "__main__":
  import coloredlogs
  coloredlogs.install(level="INFO")

  md = markdown.Markdown()
  env = jinja2.Environment()
  env.filters['markdown'] = lambda text: md.convert(text).removeprefix("<p>").removesuffix("</p>").strip()
  env.trim_blocks = True
  env.lstrip_blocks = True

  opts = parse_args()

  all_syntax_data = yaml.safe_load(open(opts.syntax_file))
  global_element_descriptions = all_syntax_data["element_descriptions"]

  # syntax_data: data for variant type (e.g., dna.del)
  syntax_data = jmespath.compile(opts.VARIANT_TYPE).search(all_syntax_data)
  if not syntax_data:
    raise RuntimeError(f"{opts.VARIANT_TYPE} not defined in {opts.syntax_file}")

  forms = syntax_data["forms"]
  if opts.merge_literals:
    for f in forms:
      f["syntax"] = merge_literals(f["syntax"])

  element_descriptions = syntax_data["elements"] or {}
  used_elements = set(en for f in forms for en in extract_elements(f["syntax"]))
  used_elements.discard("…")

  for e in used_elements:
    if e not in element_descriptions:
      if e in global_element_descriptions:
        element_descriptions[e] = global_element_descriptions[e]
      elif opts.warn_missing:
        element_descriptions[e] = '<span style="color: red;">description missing</span>'

  print(env.from_string(table_template).render(
    forms=forms, element_descriptions=element_descriptions))
